import telebot
from telebot import types
import asyncio
import g4f
from dotenv import load_dotenv
import os
import signal
import sys
from wb_parser import parser

CATEGORIES = {
    '–ú—É–∂—á–∏–Ω–∞': {
        '–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞': 'https://www.wildberries.ru/catalog/muzhchinam/odezhda/verhnyaya-odezhda',
        '–ü–∏–¥–∂–∞–∫–∏ –∏ –∂–∏–ª–µ—Ç—ã': 'https://www.wildberries.ru/catalog/muzhchinam/odezhda/pidzhaki-i-zhakety',
        '–¢–æ–ª—Å—Ç–æ–≤–∫–∏': 'https://www.wildberries.ru/catalog/muzhchinam/odezhda/tolstovki',
        '–î–∂–µ–º–ø–µ—Ä—ã –∏ –∫–∞—Ä–¥–∏–≥–∞–Ω—ã': 'https://www.wildberries.ru/catalog/muzhchinam/odezhda/dzhempery-i-kardigany',
        '–†—É–±–∞—à–∫–∏': 'https://www.wildberries.ru/catalog/muzhchinam/odezhda/rubashki',
        '–î–∂–∏–Ω—Å—ã': 'https://www.wildberries.ru/catalog/muzhchinam/odezhda/dzhinsy',
        '–ë—Ä—é–∫–∏': 'https://www.wildberries.ru/catalog/muzhchinam/odezhda/bryuki'
    },
    '–ñ–µ–Ω—â–∏–Ω–∞': {
        '–ü–ª–∞—Ç—å—è': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/platya',
        '–ë–ª—É–∑–∫–∏ –∏ —Ä—É–±–∞—à–∫–∏': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/bluzki-i-rubashki',
        '–î–∂–∏–Ω—Å—ã': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/dzhinsy-dzhegginsy',
        '–§—É—Ç–±–æ–ª–∫–∏ –∏ —Ç–æ–ø—ã': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/futbolki-i-topy',
        '–ë—Ä—é–∫–∏': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/bryuki-i-shorty',
        '–î–∂–µ–º–ø–µ—Ä—ã –∏ –∫–∞—Ä–¥–∏–≥–∞–Ω—ã': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/dzhempery-i-kardigany',
        '–ü–∏–¥–∂–∞–∫–∏ –∏ –∂–∏–ª–µ—Ç—ã': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/pidzhaki-i-zhakety',
        '–¢–æ–ª—Å—Ç–æ–≤–∫–∏': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/tolstovki',
        '–Æ–±–∫–∏': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/yubki',
        '–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞': 'https://www.wildberries.ru/catalog/zhenshchinam/odezhda/verhnyaya-odezhda'
    }
}


def get_category_url(gender, clothes_type):
    base_url = CATEGORIES[gender]['base_url']
    category_path = CATEGORIES[gender]['categories'].get(clothes_type, '')
    return base_url + category_path if category_path else base_url


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
PRIMARY_PROVIDERS = [
    g4f.Provider.TeachAnything,
    g4f.Provider.GizAI
]

BACKUP_PROVIDERS = [
    g4f.Provider.Free2GPT,
    g4f.Provider.ChatGLM
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
user_answers = {}

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
def get_gender_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ú—É–∂—á–∏–Ω–∞"), types.KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞"))
    return keyboard

def get_occasion_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add(
        types.KeyboardButton("–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"),
        types.KeyboardButton("–ü—Ä–æ—Å—Ç–æ –∫—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É")
    )
    return keyboard

def get_clothes_type_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [
        "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞",
        "–õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞",
        "–ù–∞—Ç–µ–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞",
        "–û–±—É–≤—å",
        "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
        "–í–µ—Å—å –æ–±—Ä–∞–∑"
    ]
    for button in buttons:
        keyboard.add(types.KeyboardButton(button))
    return keyboard

def get_size_keyboard(gender):
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    sizes = ["XS", "S", "M", "L", "XL", "–î—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä"] if gender == "–ñ–µ–Ω—â–∏–Ω–∞" else \
            ["M", "L", "XL", "XXL", "3XL", "–î—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä"]
    keyboard.add(*[types.KeyboardButton(size) for size in sizes])
    return keyboard

def get_shoe_size_keyboard(gender):
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    sizes = ["36", "37", "38", "39", "40", "–î—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä"] if gender == "–ñ–µ–Ω—â–∏–Ω–∞" else \
            ["39", "40", "41", "42", "43", "–î—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä"]
    keyboard.add(*[types.KeyboardButton(size) for size in sizes])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start_dialog(message):
    user_id = message.from_user.id
    user_states[user_id] = 'gender'
    user_answers[user_id] = {}
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —à–æ–ø–ø–∏–Ω–≥-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! üõçÔ∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    
    if user_id not in user_states:
        start_dialog(message)
        return

    current_state = user_states[user_id]
    text = message.text
    
    if current_state == 'gender':
        if text in ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]:
            user_answers[user_id]['gender'] = text
            user_states[user_id] = 'occasion'
            bot.send_message(
                message.chat.id,
                "–î–ª—è –∫–∞–∫–æ–≥–æ —Å–ª—É—á–∞—è —Ç–µ–±–µ –Ω—É–∂–µ–Ω –Ω–∞—Ä—è–¥? –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=get_occasion_keyboard()
            )
    
    elif current_state == 'occasion':
        user_answers[user_id]['occasion'] = text
        if text == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
            user_states[user_id] = 'event'
            bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?")
        else:
            user_states[user_id] = 'clothes_description'
            bot.send_message(
                message.chat.id,
                "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏? –û–ø–∏—à–∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–≤–∏—Ç–µ—Ä –∏ —à—Ç–∞–Ω—ã)"
            )
    
    elif current_state in ['event', 'clothes_description']:
        user_answers[user_id]['event_description'] = text
        user_states[user_id] = 'clothes_type'
        bot.send_message(
            message.chat.id,
            "–ö–∞–∫—É—é –æ–¥–µ–∂–¥—É —Ç—ã –∏—â–µ—à—å? –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_clothes_type_keyboard()
        )

    elif current_state == 'clothes_type':
        user_answers[user_id]['clothes_type'] = text
        user_states[user_id] = 'size'
        bot.send_message(
            message.chat.id,
            "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã? –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_size_keyboard(user_answers[user_id]['gender'])
        )

    elif current_state == 'size':
        user_answers[user_id]['size'] = text
        user_states[user_id] = 'shoe_size'
        bot.send_message(
            message.chat.id,
            "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–∞–∑–º–µ—Ä –æ–±—É–≤–∏? –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä):",
            reply_markup=get_shoe_size_keyboard(user_answers[user_id]['gender'])
        )

    elif current_state == 'shoe_size':
        user_answers[user_id]['shoe_size'] = text
        user_states[user_id] = 'color'
        bot.send_message(
            message.chat.id,
            "–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
            reply_markup=types.ReplyKeyboardRemove()
        )

    elif current_state == 'color':
        user_answers[user_id]['color'] = text
        user_states[user_id] = 'wishes'
        bot.send_message(
            message.chat.id,
            "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–∞–∫–∏–µ-—Ç–æ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ—á—É –ø–ª–∞—Ç—å–µ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–ø–∏–Ω–æ–π, –Ω—É–∂–Ω–∞ —É–¥–æ–±–Ω–∞—è –æ–±—É–≤—å –¥–ª—è —Ç–∞–Ω—Ü–µ–≤)"
        )

    elif current_state == 'wishes':
        user_answers[user_id]['wishes'] = text
        user_states[user_id] = 'final'
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(generate_recommendations(message, user_answers[user_id]))
        loop.close()

async def generate_recommendations(message, answers):
    print("\n=== –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ===")
    print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {answers}")
    
    prompt = f"""
    –¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. –°–æ–∑–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:
    –ü–æ–ª: {answers['gender']}
    {'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ' + answers['event_description'] if 'event_description' in answers else '–ü–æ–∂–µ–ª–∞–Ω–∏—è: ' + answers['clothes_description']}
    –¢–∏–ø –æ–¥–µ–∂–¥—ã: {answers['clothes_type']}
    –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {answers['size']}
    –¶–≤–µ—Ç–∞: {answers['color']}
    –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {answers['wishes']}
    
    –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–µ–∂–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –í–∞–∂–Ω–æ:
    - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –∏ —á–µ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    - –ü–∏—à–∏ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å —Ü–∏—Ñ—Ä—ã
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    """

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –∏–∑ –Ω–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    search_url = CATEGORIES[answers['gender']]['–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞']
    
    items_to_search = await get_best_response(prompt)
    print(f"\n–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n{items_to_search}")
    
    try:
        products = parser(url=search_url, low_price=1000, top_price=50000, discount=0)
        if products:
            for product in products[:3]:
                recommendation = await format_recommendation(product)
                bot.send_message(message.chat.id, recommendation)
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")


# async def generate_recommendations(message, answers):
#     print("\n=== –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ===")
#     print(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {answers}")
    
#     catalogs_wb = get_catalogs_wb()
    
#     prompt = f"""
#     –¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. –°–æ–∑–¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:
#     –ü–æ–ª: {answers['gender']}
#     {'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ' + answers['event_description'] if 'event_description' in answers else '–ü–æ–∂–µ–ª–∞–Ω–∏—è: ' + answers['clothes_description']}
#     –¢–∏–ø –æ–¥–µ–∂–¥—ã: {answers['clothes_type']}
#     –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {answers['size']}
#     –¶–≤–µ—Ç–∞: {answers['color']}
#     –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {answers['wishes']}
    
#        –ù–∞–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–¥–µ–∂–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–µ. –í–∞–∂–Ω–æ:  

#    - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –∏ —á–µ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤  
#    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∫–æ–±–∫–∏ –∏ —Å–ª–æ–∂–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è  
#    - –ü–∏—à–∏ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å —Ü–∏—Ñ—Ä—ã  
#    - –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π  
   
#     –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:  
#     1. –ß–µ—Ä–Ω—ã–π –∫–æ—Å—Ç—é–º  
#     2. –ë–µ–ª–∞—è —Ä—É–±–∞—à–∫–∞  
#     3. –ß–µ—Ä–Ω—ã–µ —Ç—É—Ñ–ª–∏  
#     –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ  
#     """
    
#     items_to_search = await get_best_response(prompt)
#     print(f"\n–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n{items_to_search}")
    
#     search_results = []
#     catalog_data = get_data_category(catalogs_wb)
    
#     for item in items_to_search.split('\n'):
#         if not item.strip() or not item[0].isdigit():
#             continue
        
#         item = item.split('.')[1].strip()
#         print(f"\n–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: {item}")
        
#         for category in catalog_data:
#             try:
#                 # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 300 —Ç–æ–≤–∞—Ä–æ–≤
#                 products = parser(
#                     url=category['url'], 
#                     low_price=1000, 
#                     top_price=50000, 
#                     discount=0,
#                     limit=300  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä–∫—É
#                 )
                
#                 if products:
#                     filtered_products = [p for p in products if item.lower() in p['name'].lower()]
#                     if filtered_products:
#                         search_results.append({
#                             'item': item,
#                             'products': filtered_products[:3]
#                         })
#                         break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã
#             except Exception as e:
#                 continue


async def generate_ai_description(name, brand, rating, price):
    prompt = f"""
    –û–ø–∏—à–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä:
    –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
    –ë—Ä–µ–Ω–¥: {brand}
    –†–µ–π—Ç–∏–Ω–≥: {rating}
    –¶–µ–Ω–∞: {price} —Ä—É–±.

    –ù–∞–ø–∏—à–∏ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ—á–µ–º—É —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
    –£–ø–æ–º—è–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ç–∏–ª—å –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.
    –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω –∏ –¥–æ–±–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
    """
    
    description = await get_best_response(prompt)
    return description

async def format_recommendation(item):
    recommendation = f"üéÄ –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
    
    product_description = await generate_ai_description(
        name=item['name'],
        brand=item['brand'],
        rating=item['rating'],
        price=item['salePriceU']
    )
    
    recommendation += f"{product_description}\n\n"
    recommendation += f"‚ú® {item['name']}\n"
    recommendation += f"üí∞ –¶–µ–Ω–∞: {item['salePriceU']} —Ä—É–±.\n"
    if item['sale']:
        recommendation += f"üî• –°–∫–∏–¥–∫–∞: {item['sale']}%\n"
    recommendation += f"üëç –†–µ–π—Ç–∏–Ω–≥: {item['rating']}\n"
    recommendation += f"üõçÔ∏è –ë—Ä–µ–Ω–¥: {item['brand']}\n\n"
    recommendation += f"–ö—É–ø–∏—Ç—å –∑–¥–µ—Å—å: {item['link']}"
    
    return recommendation


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
async def get_response_from_provider(provider, message, timeout=15):
    try:
        response = await asyncio.wait_for(
            g4f.ChatCompletion.create_async(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": message}],
                provider=provider
            ),
            timeout=timeout
        )
        return {"success": True, "response": response, "provider": provider.__name__}
    except Exception as e:
        print(f"Error with {provider.__name__}: {str(e)}")
        return {"success": False, "provider": provider.__name__}

async def get_best_response(message: str) -> str:
    # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    tasks = [get_response_from_provider(p, message) for p in PRIMARY_PROVIDERS]
    responses = await asyncio.gather(*tasks)
    successful_responses = [r for r in responses if r["success"]]

    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö
    if not successful_responses:
        tasks = [get_response_from_provider(p, message) for p in BACKUP_PROVIDERS]
        responses = await asyncio.gather(*tasks)
        successful_responses = [r for r in responses if r["success"]]

    if successful_responses:
        best_response = max(successful_responses, key=lambda x: len(x["response"]))
        print(f"Using response from {best_response['provider']}")
        return best_response["response"]
    
    return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
def signal_handler(sig, frame):
    print('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...')
    bot.stop_polling()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

@bot.message_handler(commands=['restart'])
def restart(message):
    user_id = message.from_user.id
    if user_id in user_answers:
        del user_answers[user_id]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä')
    markup.add(start_button)
    bot.send_message(message.chat.id, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.", reply_markup=markup)

if __name__ == "__main__":
    try:
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
        bot.infinity_polling(timeout=60, long_polling_timeout=60, allowed_updates=['message'])
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        bot.stop_polling()