import telebot
import asyncio
import g4f
from dotenv import load_dotenv
import os
from database import Database
import signal
import sys

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
db = Database()

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
PRIMARY_PROVIDERS = [
    g4f.Provider.HuggingSpace,
    g4f.Provider.TeachAnything
]

BACKUP_PROVIDERS = [
    g4f.Provider.GizAI,
    g4f.Provider.Free2GPT,
    g4f.Provider.ChatGLM
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_answers = {}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
questions = {
    'greeting': "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –®–æ–ø–ø–∏–Ω–≥-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç! üõçÔ∏è –î–ª—è –∫–∞–∫–æ–≥–æ —Å–ª—É—á–∞—è —Ç–µ–±–µ –Ω—É–∂–µ–Ω –Ω–∞—Ä—è–¥?",
    'style': "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å? (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π, —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π, casual, –±–æ—Ö–æ, –º–∏–Ω–∏–º–∞–ª–∏–∑–º)",
    'budget': "–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –Ω–∞—Ä—è–¥? (–¥–æ 5000 —Ä—É–±, –¥–æ 10000 —Ä—É–±, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)",
    'color': "–ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å? (—á–µ—Ä–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π, –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞)",
    'size': "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã? (XS, S, M, L, XL)",
    'shoe_size': "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–∞–∑–º–µ—Ä –æ–±—É–≤–∏? (36, 37, 38, 39, 40)",
    'wishes': "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–∞–∫–∏–µ-—Ç–æ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ—á—É –ø–ª–∞—Ç—å–µ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–ø–∏–Ω–æ–π, –Ω—É–∂–Ω–∞ —É–¥–æ–±–Ω–∞—è –æ–±—É–≤—å –¥–ª—è —Ç–∞–Ω—Ü–µ–≤)",
    'marketplace': "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –∫–∞–∫–∏–µ-—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã? (Lamoda, ASOS, Wildberries, Ozon)"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
def signal_handler(sig, frame):
    print('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...')
    bot.stop_polling()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
async def get_response_from_provider(provider, message, timeout=15):
    try:
        response = await asyncio.wait_for(
            g4f.ChatCompletion.create_async(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": message}],
                provider=provider
            ),
            timeout=timeout
        )
        return {"success": True, "response": response, "provider": provider.__name__}
    except Exception as e:
        print(f"Error with {provider.__name__}: {str(e)}")
        return {"success": False, "provider": provider.__name__}

async def get_best_response(message: str) -> str:
    # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    tasks = [get_response_from_provider(p, message) for p in PRIMARY_PROVIDERS]
    responses = await asyncio.gather(*tasks)
    successful_responses = [r for r in responses if r["success"]]

    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö
    if not successful_responses:
        tasks = [get_response_from_provider(p, message) for p in BACKUP_PROVIDERS]
        responses = await asyncio.gather(*tasks)
        successful_responses = [r for r in responses if r["success"]]

    if successful_responses:
        best_response = max(successful_responses, key=lambda x: len(x["response"]))
        print(f"Using response from {best_response['provider']}")
        return best_response["response"]
    
    return "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start_dialog(message):
    user_id = message.from_user.id
    user_states[user_id] = 'greeting'
    user_answers[user_id] = {}
    bot.send_message(message.chat.id, questions['greeting'])

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    
    if user_id not in user_states:
        start_dialog(message)
        return

    current_state = user_states[user_id]
    user_answers[user_id][current_state] = message.text
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    db.save_dialog(
        user_id,
        message.chat.id,
        questions[current_state],
        message.text
    )

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_state = {
        'greeting': 'style',
        'style': 'budget',
        'budget': 'color',
        'color': 'size',
        'size': 'shoe_size',
        'shoe_size': 'wishes',
        'wishes': 'marketplace',
        'marketplace': 'final'
    }

    if current_state in next_state:
        next_question = next_state[current_state]
        if next_question == 'final':
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(generate_recommendations(message, user_answers[user_id]))
            loop.close()
        else:
            user_states[user_id] = next_question
            bot.send_message(message.chat.id, questions[next_question])

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def generate_recommendations(message, answers):
    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –Ω–∞—Ä—è–¥ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
    –°–ª—É—á–∞–π: {answers['greeting']}
    –°—Ç–∏–ª—å: {answers['style']}
    –ë—é–¥–∂–µ—Ç: {answers['budget']}
    –¶–≤–µ—Ç–∞: {answers['color']}
    –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã: {answers['size']}
    –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏: {answers['shoe_size']}
    –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {answers['wishes']}
    –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å: {answers['marketplace']}
    
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –æ–¥–µ–∂–¥—ã.
    """
    
    response = await get_best_response(prompt)
    bot.send_message(message.chat.id, f"–í–æ—Ç —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è:\n\n{response}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
        bot.infinity_polling(timeout=60, long_polling_timeout=60, allowed_updates=['message'])
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        bot.stop_polling()
